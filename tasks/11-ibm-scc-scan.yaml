apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ibm-scc-scan
  annotations:
    description: Initiate an IBM Cloud security and compliance validation scan based on https://cloud.ibm.com/apidocs/security-compliance/posture
    app.openshift.io/description: Initiate an IBM Cloud security and compliance validation scan based on https://cloud.ibm.com/apidocs/security-compliance/posture
    app.openshift.io/vcs-uri: https://github.com/IBM/ibm-garage-tekton-tasks
    app.openshift.io/vcs-ref: master
  labels:
    version: 0.0.0
spec:
  params:
    - name: tools-image
      default: quay.io/ibmgaragecloud/ibmcloud-dev:v2.0.4
    - name: location
      description: Endpoint location for the security and compliance api.  Values are "us", "eu" or "asap".
      default: "us"
    - name: scope_id
      description: The unique ID of the scope.
    - name: profile_id
      description: The unique ID of the profile.
    - name: group_profile_id
      description: The ID of the profile group.

  steps:
    - name: scc-initiator
      image: $(params.tools-image)
      env:
        - name: IBM_CLOUD_APIKEY
          valueFrom:
            secretKeyRef:
              key: APIKEY
              name: ibmcloud-apikey
              optional: true
      command: ["/bin/sh", "-c"]
      args:
        - |
          #!/bin/sh

          # This task will trigger a security and compliance scan on IBM Cloud.  Scope and profiles can be configured manually in
          # the IBM Cloud UI or via Terraform at and then this task can be used to trigger compliance scans automatically from a pipeline.
          #
          # The scope_id can be found by accessing scopes at https://cloud.ibm.com/security-compliance/scopes
          # The profile_id can be found by accessing profiles at https://cloud.ibm.com/security-compliance/profiles
          # The group_profile_id can be found in the documentation at https://cloud.ibm.com/apidocs/security-compliance/posture 
          #
          # Details about the security and compliance API can be found at https://cloud.ibm.com/apidocs/security-compliance/posture

          # Get IAM access token for subsequent requests
          curl -s -o token.txt -X POST \
            "https://iam.cloud.ibm.com/identity/token" \
            --header "Content-Type: application/x-www-form-urlencoded" \
            --header "Accept: application/json" \
            --data-urlencode "grant_type=urn:ibm:params:oauth:grant-type:apikey" \
            --data-urlencode "apikey=${IBM_CLOUD_APIKEY}"

          IAM_TOKEN=$(jq ".access_token" -r token.txt)

          # Get the account id using the api key
          curl -s -o details.txt \
            "https://iam.cloud.ibm.com/v1/apikeys/details" \
            -H "Authorization: Bearer ${IAM_TOKEN}"   \
            -H "IAM-Apikey: ${IBM_CLOUD_APIKEY}" \
            -H "Content-Type: application/json"

          ACCOUNT_ID=$(jq ".account_id" -r details.txt)

          LOCATION="$(params.location)"
          SCOPE_ID="$(params.scope_id)"
          PROFILE_ID="$(params.profile_id)"
          GROUP_PROFILE_ID="$(params.group_profile_id)"

          echo "LOCATION: ${LOCATION}"
          echo "ACCOUNT_ID: ${ACCOUNT_ID}"
          echo "SCOPE_ID: ${SCOPE_ID}"
          echo "PROFILE_ID: ${PROFILE_ID}"
          echo "GROUP_PROFILE_ID: ${GROUP_PROFILE_ID}"

          # Trigger security & compliance validation scan
          printf "\nInitiating request to https://${LOCATION}.compliance.cloud.ibm.com/posture/v1/scans/validations?account_id=${ACCOUNT_ID}\n"
          
          STATUS=$(curl -s -o response.txt -w "%{http_code}" \
            -X POST "https://${LOCATION}.compliance.cloud.ibm.com/posture/v1/scans/validations?account_id=${ACCOUNT_ID}"   \
            -H "Authorization: Bearer ${IAM_TOKEN}"   \
            -H 'Content-type: application/json'   \
            -d "{
              \"scope_id\": \"${SCOPE_ID}\", 
              \"profile_id\": \"${PROFILE_ID}\", 
              \"group_profile_id\": \"${GROUP_PROFILE_ID}\" 
            }")

          printf "\nSTATUS: ${STATUS}\n"
          jq '.' response.txt   


          # cleanup
          rm -f token.txt
          rm -f details.txt
          rm -f response.txt

          if [ $STATUS != "202" ]; then
            #if not http 202, fail the pipeline
            exit 1
          else
            exit 0
          fi
  