apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ibm-img-scan-ibm
  annotations:
    description: Checks the results for the Vulnerability Advisor scan if deploying images to IBM Container Registry
    app.openshift.io/description: Checks the results for the Vulnerability Advisor scan if deploying images to IBM Container Registry
    app.openshift.io/vcs-uri: https://github.com/IBM/ibm-garage-tekton-tasks
    app.openshift.io/vcs-ref: master
  labels:
    version: 0.0.0
spec:
  params:
    - name: image-url
      description: "The location of image to scan on IBM Container Registry <server>/<namespace>/<repository>:<tag>"
    - name: scan-image
      description: Flag indicating that a scan should be performed
      default: "false"
    - name: tools-image
      default: quay.io/ibmgaragecloud/ibmcloud-dev:v2.0.4
    - name: source-dir
      default: /source
  volumes:
    - name: source
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - name: source
        mountPath: $(params.source-dir)
  steps:
    - name: scan-image
      image: $(params.tools-image)
      workingDir: $(params.source-dir)
      env:
        - name: HOME
          value: /home/devops
        - name: IBM_CLOUD_APIKEY
          valueFrom:
            secretKeyRef:
              key: APIKEY
              name: ibmcloud-apikey
              optional: true
        - name: IBM_CLOUD_REGION
          valueFrom:
            configMapKeyRef:
              name: ibmcloud-config
              key: REGION
              optional: true
      script: |
          #!/usr/bin/env bash
          set -ex

          IMAGE_URL=$(params.image-url)
          REGISTRY_SERVER=$(echo $(params.image-url) | awk -F / '{print $1}')
          PERFORM_SCAN="$(params.scan-image)"

          if [[ "${PERFORM_SCAN}" == "false" ]] || [[ -z "${PERFORM_SCAN}" ]]; then
            echo "User selected to skip scanning. Skipping Vulnerability Advisor validation."
            exit 0
          fi
          if [[ ! "${REGISTRY_SERVER}" =~ icr.io ]]; then
            echo "The image is not stored in the IBM Cloud Image Registry. Skipping Vulnerability Advisor validation"
            exit 0
          fi


          echo -e "VA Security Scan image in registry"

          echo "Registry URL: ${REGISTRY_SERVER}"

          set +x
          ibmcloud login --apikey ${IBM_CLOUD_APIKEY} -r ${IBM_CLOUD_REGION}
          ibmcloud target -r ${IBM_CLOUD_REGION}
          set -x
          ibmcloud cr namespace-list

          echo "Getting the VA status of ${IMAGE_URL}"

          set +e
          ibmcloud cr va ${IMAGE_URL} --output json | grep -i "Try again later"
          retry=$?
          while [ $retry -eq 0 ]; do
            sleep 30
            echo "Trying again to see if scan is done"
            ibmcloud cr va ${IMAGE_URL} --output json | grep -i "Try again later"
            retry=$?
          done
          set -e
          ibmcloud cr va ${IMAGE_URL} --output json
          echo "Saving results to va-result.json"
          ibmcloud cr va ${IMAGE_URL} --output json > va-result.json
          VA_STATUS=$(cat va-result.json | jq -r '.[].status')

          echo "VA scan status: ${VA_STATUS}"

          if [[ "${VA_STATUS}" == "OK" ]]; then
            echo "VA - No Issues in the image"
            exit 0
          elif [[ $(cat va-result.json | jq -r '.[].vulnerabilities | length') -gt 0 ]]; then
            echo "VA Failure: $(cat va-result.json | jq -r '.[].vulnerabilities | length') vulnerabilities found in the image"
            cat va-result.json | jq -r '.[].vulnerabilities'
            exit 1
          elif [[ $(cat va-result.json | jq -r '.[].configuration_issues | length') -gt 0 ]]; then
            echo "VA Warning - $(cat va-result.json | jq -r '.[].configuration_issues | length') configuration issues found in the image"
            cat va-result.json | jq -r '.[].configuration_issues'
            exit 0
          else
            echo "VA Warning: non-OK status from Vulnerability Advisor ${VA_STATUS}"
            cat va-result.json | jq -r '.[]'
          fi
