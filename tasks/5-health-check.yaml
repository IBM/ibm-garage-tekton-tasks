apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ibm-health-check-v2-7-8
  annotations:
    description: Performs a health check on the deployed application
    app.openshift.io/description: Performs a health check on the deployed application
    app.openshift.io/vcs-uri: https://github.com/IBM/ibm-garage-tekton-tasks
    app.openshift.io/vcs-ref: master
  labels:
    version: 2.7.8
spec:
  params:
    - name: app-namespace
      default: ""
    - name: app-name
      default: ""
    - name: deploy-ingress-type
      default: "route"
    - name: health-protocol
      default: "https"
    - name: health-endpoint
      default: "/health"
    - name: health-url
      default: ""
    - name: health-curl
      default: "-k"
    - name: tools-image
      default: quay.io/aminrachyd/ibmcloud-dev:latest
    - name: resource-type
      default: ""
  steps:
    - name: health-check
      image: $(params.tools-image)
      script: |
        #!/usr/bin/env bash
        set -x

        URL="$(params.health-url)"
        CURL_FLAGS="$(params.health-curl)"

        if [[ -z "${URL}" ]]; then
          APP_NAMESPACE="$(params.app-namespace)"
          APP_NAME="$(params.app-name)"
          PROTOCOL="$(params.health-protocol)"
          INGRESS_TYPE="$(params.deploy-ingress-type)"
          HEALTH_ENDPOINT="$(params.health-endpoint)"

          echo "resource-type: $(params.resource-type)"

          if [[ "$(params.resource-type)" == *"integrationserver"* ]]; then
              HOST=$(kubectl get route/${APP_NAME}-${PROTOCOL} --namespace ${APP_NAMESPACE} --output=jsonpath='{ .spec.host }')
              if [[ -z "${PROTOCOL}" ]]; then
                PROTOCOL="https"
              fi
          elif [[ "${INGRESS_TYPE}" == "route" ]]; then
              HOST=$(kubectl get route/${APP_NAME} --namespace ${APP_NAMESPACE} --output=jsonpath='{ .spec.host }')
              if [[ -z "${PROTOCOL}" ]]; then
                PROTOCOL="https"
              fi
          else
              HOST=$(kubectl get ingress/${APP_NAME} --namespace ${APP_NAMESPACE} --output=jsonpath='{ .spec.rules[0].host }')
              if [[ -z "${PROTOCOL}" ]]; then
                PROTOCOL="http"
              fi
          fi

          URL="${PROTOCOL}://${HOST}${HEALTH_ENDPOINT}"

        fi

        sleep_countdown=5
        # sleep for 10 seconds to allow enough time for the server to start
        sleep 10
        echo "Health check start"
        # TODO Update curl command to grpc_health_probe
        if [[ "${PROTOCOL}" == "grpc" ]]; then
            echo "grpc protocol"
            GRPC_ADDR="${APP_NAME}:$(kubectl get service ${APP_NAME} -n ${APP_NAMESPACE} --output=jsonpath='{ .spec.ports[0].port }')"
            grpc_health_probe -addr ${GRPC_ADDR}
        elif [[ "${PROTOCOL}" == "https" ]]; then
            while [[ $(curl ${CURL_FLAGS} -sL -w "%{http_code}\\n" "${URL}" -o /dev/null --connect-timeout 3 --max-time 5 --retry 3 --retry-max-time 30) != "200" ]]; do
                sleep 30
                echo "Health check failure. Remaining retries: $sleep_countdown"
                sleep_countdown=$((sleep_countdown-1))
                if [[ $sleep_countdown -eq 0 ]]; then
                        echo "Could not reach health endpoint: ${URL}"
                        exit 1;
                fi
            done
        else
            echo "Health check failure. Protocol not supported: ${PROTOCOL}"
            exit 1;
        fi
        echo "Successfully reached health endpoint: ${URL}"
        echo "====================================================================="
