apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ibm-operator-catalog-gitops
  annotations:
    description: Publishes the helm chart configuration to the provided gitops repo to trigger downstream deployments
    app.openshift.io/description: Publishes the helm chart configuration to the provided gitops repo to trigger downstream deployments
    app.openshift.io/vcs-uri: https://github.com/IBM/ibm-garage-tekton-tasks
    app.openshift.io/vcs-ref: master
  labels:
    version: 0.0.0
spec:
  params:
    - name: git-url
      description: The url for the git repository
    - name: git-revision
      description: The git revision (branch, tag, or sha) that should be built
      default: master
    - name: app-name
      default: ""
    - name: source-dir
      default: /source
    - name: gitops-dir
      default: /gitops
    - name: subdir
      default: ""
    - name: parentdir
      default: ""
    - name: deploy-dir
      default: deploy
    - name: image-url
      default: ""
    - name: tools-image
      default: quay.io/ibmgaragecloud/ibmcloud-dev:v2.0.4
  volumes:
    - name: source
      emptyDir: {}
    - name: gitops
      emptyDir: { }
  stepTemplate:
    volumeMounts:
      - name: source
        mountPath: $(params.source-dir)
      - name: gitops
        mountPath: $(params.gitops-dir)
  steps:
    - name: git-clone
      image: quay.io/ibmgaragecloud/alpine-git
      env:
        - name: GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: password
              optional: true
        - name: GIT_USERNAME
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: username
              optional: true
      script: |
        set +x
        if [[ -n "${GIT_USERNAME}" ]] && [[ -n "${GIT_PASSWORD}" ]]; then
            git clone "$(echo $(params.git-url) | awk -F '://' '{print $1}')://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.git-url) | awk -F '://' '{print $2}')" $(params.source-dir)
        else
            set -x
            git clone $(params.git-url) $(params.source-dir)
        fi
        set -x
        cd $(params.source-dir)
        git checkout $(params.git-revision)
    - name: gitops
      image: $(params.tools-image)
      workingDir: $(params.gitops-dir)
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: HOME
          value: /home/devops
        - name: GIT_USERNAME
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: username
              optional: true
        - name: GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: password
              optional: true
        - name: GIT_USERNAME_CD
          valueFrom:
            secretKeyRef:
              name: gitops-cd-secret
              key: username
              optional: true
        - name: GIT_PASSWORD_CD
          valueFrom:
            secretKeyRef:
              name: gitops-cd-secret
              key: password
              optional: true
        - name: GIT_PARENT_DIR
          valueFrom:
            configMapKeyRef:
              name: gitops-repo
              key: parentdir
              optional: true
        - name: GIT_PROTOCOL
          valueFrom:
            configMapKeyRef:
              name: gitops-repo
              key: protocol
              optional: true
        - name: GIT_HOST
          valueFrom:
            configMapKeyRef:
              name: gitops-repo
              key: host
              optional: true
        - name: GIT_ORG
          valueFrom:
            configMapKeyRef:
              name: gitops-repo
              key: org
              optional: true
        - name: GIT_REPO
          valueFrom:
            configMapKeyRef:
              name: gitops-repo
              key: repo
              optional: true
        - name: GIT_BRANCH
          valueFrom:
            configMapKeyRef:
              name: gitops-repo
              key: branch
              optional: true
      script: |
        #!/usr/bin/env bash
        set -ex

        APP_NAME="$(params.app-name)"
        SUBDIR="$(params.subdir)"
        if [[ -z "${SUBDIR}" ]]; then
          SUBDIR="${APP_NAME}"
        fi
        if [[ -n "$(params.parentdir)" ]]; then
          PARENT_DIR="$(params.parentdir)"
        elif [[ -n "${GIT_PARENT_DIR}" ]] && [[ "${GIT_PARENT_DIR}" = "bash -c"* ]]; then
          PARENT_DIR=$(eval $GIT_PARENT_DIR | tail -n 1)
        elif [[ -n "${GIT_PARENT_DIR}" ]]; then
          PARENT_DIR="${GIT_PARENT_DIR}"
        else
          PARENT_DIR="."
        fi
        SUBDIR="${PARENT_DIR}/${SUBDIR}"

        PROTOCOL="${GIT_PROTOCOL}"
        if [[ -z "${PROTOCOL}" ]]; then
          PROTOCOL="https"
        fi


        BUNDLE_URL="$(params.image-url)"

        if [[ -z "${GIT_HOST}" ]] || [[ -z "${GIT_ORG}" ]] || [[ -z "${GIT_REPO}" ]]; then
            echo "GitOps repo has not been configured with confimap gitops-repo. Skipping trigger step"
            exit 0
        fi

        set +x
        if [[ -n "${GIT_USERNAME_CD}" ]]; then
          GIT_AUTH_USER="${GIT_USERNAME_CD}"
          GIT_AUTH_PWD="${GIT_PASSWORD_CD}"
        elif [[ -n "${GIT_USERNAME}" ]]; then
          GIT_AUTH_USER="${GIT_USERNAME}"
          GIT_AUTH_PWD="${GIT_PASSWORD}"
        else
          echo "Credentials for GitOps repo not set in secret gitops-cd-secret or git-credentials"
          exit 1
        fi
        set -x

        BRANCH_CMD=""
        if [[ -n "${GIT_BRANCH}" ]]; then
          BRANCH_CMD="-b ${GIT_BRANCH}"
        fi

        git config --global user.email "gitops@cloudnativetoolkit.dev"
        git config --global user.name "Cloud Native Toolkit Pipeline"
        echo "git clone ${BRANCH_CMD} ${PROTOCOL}://${GIT_AUTH_USER}:xxxx@${GIT_HOST}/${GIT_ORG}/${GIT_REPO}"
        set +x
        GIT_URL="${PROTOCOL}://${GIT_AUTH_USER}:${GIT_AUTH_PWD}@${GIT_HOST}/${GIT_ORG}/${GIT_REPO}"
        git clone ${BRANCH_CMD} ${GIT_URL} $(params.gitops-dir)
        set -x
        cd $(params.gitops-dir)

        mkdir -p ${SUBDIR}
        if [[ -d $(params.source-dir)/$(params.deploy-dir) ]] && grep -q CatalogSource $(params.source-dir)/$(params.deploy-dir)/*; then
          echo "Copying files from $(params.deploy-dir)/ into the GitOps repo ${SUBDIR}/"
          # Copy any non-CatalogSource files
          grep -L CatalogSource $(params.source-dir)/$(params.deploy-dir)/* | while read file; do
            dest_file=$(basename ${file})

            echo "Copying ${file} to ${SUBDIR}/${dest_file}"
            cp "${file}" ${SUBDIR}/${dest_file}
          done
          # Copy the CatalogSource and replace the image with the BUNDLE_URL
          grep -l CatalogSource $(params.source-dir)/$(params.deploy-dir)/* | while read file; do
            dest_file=$(basename ${file})

            echo "Copying ${file} to ${SUBDIR}/${dest_file}"
            cat "${file}" | sed -E "s~([ ]+image: ).*~\1${BUNDLE_URL}~g" > ${SUBDIR}/${dest_file}
          done
        else
          echo "Generating catalog-source.yaml"
          cat > ${SUBDIR}/catalog-source.yaml << EOF
        apiVersion: operators.coreos.com/v1alpha1
        kind: CatalogSource
        metadata:
          name: ${APP_NAME}
        spec:
          sourceType: grpc
          image: ${BUNDLE_URL}
          displayName: ${APP_NAME}
          publisher: grpc
        EOF

          echo "CatalogSource generated"
          cat ${SUBDIR}/catalog-source.yaml
        fi

        if [[ $(git status -s | wc -l) -eq 0 ]]; then
          echo "No changes"
          exit 0
        fi

        git add "${SUBDIR}/"
        git commit -m "Updates ${APP_NAME}"
        git push -v
