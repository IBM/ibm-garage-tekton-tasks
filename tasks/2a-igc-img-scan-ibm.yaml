apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: igc-img-scan-ibm
  labels:
    version: 0.0.0 
spec:
  inputs:
    params:
      - default: 'docker.io/node:12-stretch'
        name: js-image
        type: string
      - default: 'docker.io/garagecatalyst/ibmcloud-dev:1.0.10'
        name: tools-image
        type: string
    resources:
      - name: source
        type: git
  outputs:
    resources:
      - name: image
        type: image
  steps:
    - args:
        - '-c'
        - >
          set -x 

          set +e 

          git fetch origin ${BRANCH} --tags 

          git checkout ${BRANCH}

          echo "IMAGE NAME - Setup " 

          echo "IMAGE_VERSION1=$(git describe --abbrev=0 --tags)"  >
          ./env-config  

          echo "IMAGE_NAME1=$(basename -s .git `git config --get
          remote.origin.url` | tr '[:upper:]' '[:lower:]' | sed 's/_/-/g')" >>
          ./env-config  

          source ./env-config    

          echo ${IMAGE_VERSION1}  

          echo ${IMAGE_NAME1}   

          if [[ -z "${IMAGE_VERSION1}" ]]; then
              echo "Error: IMAGE_VERSION not defined"
              exit 1
          fi  

          if [[ -z "${IMAGE_NAME1}" ]]; then
              echo "Error: IMAGE_NAME not defined"
              exit 1
          fi
      command:
        - /bin/bash
      image: $(inputs.params.js-image)
      name: setup
      resources: {}
      workingDir: $(inputs.resources.source.path)
    - args:
        - '-c'
        - >
          set -e 

          . ./env-config 

          echo "REGISTRYURL + ${REGISTRY_URL}" 

          IMAGE_URL=$(outputs.resources.image.url) 

          echo ${IMAGE_URL}

          REGISTRY_URL=$(echo $IMAGE_URL | awk -F / '{print $1}') 

          echo ${REGISTRY_URL}

          REGISTRY_NAMESPACE=$(echo $IMAGE_URL | awk -F / '{print $2}') 

          echo -e "VA Security Scan image in regisry " 

          echo "Registr URL"  

          echo
          ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME1}:${IMAGE_VERSION1}

          URL=${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME1}:${IMAGE_VERSION1}

          ibmcloud login --apikey ${REGISTRY_PASSWORD} -g ${RESOURCE_GROUP} -r
          ${REGION} 

          ibmcloud cr namespace-list

          echo ${URL}

          sleep 2m

          VA_FLAG=$(ibmcloud cr va ${URL} --output json | grep OK)

          echo ${VA_FLAG} 

          if [[ -n "${VA_FLAG}" ]]; then
            echo "VA - No Issues in the image"
          else 
            echo "VA - Issues in the image"
            ibmcloud cr va ${URL} --output json
          fi
      command:
        - /bin/bash
      env:
        - name: HOME
          value: /home/devops
        - name: REGISTRY_USER
          valueFrom:
            secretKeyRef:
              key: REGISTRY_USER
              name: ibmcloud-apikey
              optional: true
        - name: REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              key: APIKEY
              name: ibmcloud-apikey
              optional: true
      envFrom:
        - configMapRef:
            name: ibmcloud-config
        - secretRef:
            name: ibmcloud-apikey
      image: $(inputs.params.tools-image)
      name: va-scan
      resources: {}
      workingDir: $(inputs.resources.source.path)
