apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ibm-build-tag-push-ace-bar
  annotations:
    description: Executes logic to build, tag and push a container image using the intermediate sha tag to the image-url
    app.openshift.io/description: Executes logic to build, tag and push a container image using the intermediate sha tag to the image-url
    app.openshift.io/vcs-uri: https://github.com/IBM/ibm-garage-tekton-tasks
    app.openshift.io/vcs-ref: master
  labels:
    version: 0.0.0
spec:
  params:
  - name: git-url
  - name: git-revision
    default: master
  - name: source-dir
    default: /source
  - name: image-server
    default: ""
  - name: image-namespace
    default: ""
  - name: image-repository
    default: ""
  - name: image-tag
    default: ""
  - name: BUILDER_IMAGE
    default: quay.io/buildah/stable:v1.15.0
  - name: DOCKERFILE
    default: ./Dockerfile
  - name: CONTEXT
    default: .
  - name: TLSVERIFY
    default: "false"
  - name: FORMAT
    default: docker
  - name: STORAGE_DRIVER
    description: Set buildah storage driver
    default: overlay
  - name: app-name
    default: ""
  - name: ace-project
    default: ""
  volumes:
  - name: varlibcontainers
    emptyDir: {}
  - name: source
    emptyDir: {}
  stepTemplate:
    volumeMounts:
    - name: source
      mountPath: $(params.source-dir)
  steps:
  - name: git-clone
    image: quay.io/ibmgaragecloud/alpine-git
    env:
    - name: GIT_PASSWORD
      valueFrom:
        secretKeyRef:
          key: password
          name: git-credentials
          optional: true
    - name: GIT_USERNAME
      valueFrom:
        secretKeyRef:
          key: username
          name: git-credentials
          optional: true
    script: |
      set +x
      if [[ -n "${GIT_USERNAME}" ]] && [[ -n "${GIT_PASSWORD}" ]]; then
          git clone "$(echo $(params.git-url) | awk -F '://' '{print $1}')://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.git-url) | awk -F '://' '{print $2}')" $(params.source-dir)
      else
          set -x
          git clone $(params.git-url) $(params.source-dir)
      fi
      set -x
      cd $(params.source-dir)
      git checkout $(params.git-revision)
  - name: compile
    image: docker.io/rsundara/ace-build
    envFrom:
    - secretRef:
        name: artifactory-access
    command:
    - /bin/sh
    args:
    - -c
    - |
      set -eu;
      echo "Compile BAR";

      # Used for debugging with mqsicreatebar
      /usr/bin/Xvfb :100 &
      export DISPLAY=:100

      cd $(params.source-dir)/workspace
      echo "Generating BAR"
      mqsicreatebar -data . -b $(params.source-dir)/$(params.app-name)-$(params.image-tag).bar -a $(params.ace-project)

      echo "Upload BAR to Artifactory"
      curl -u ${ARTIFACTORY_USER}:${ARTIFACTORY_ENCRYPT} -T $(params.source-dir)/$(params.app-name)-$(params.image-tag).bar "$(ARTIFACTORY_URL)/artifactory/generic-local/$(params.app-name)-$(params.image-tag).bar"
  - name: build
    image: $(params.BUILDER_IMAGE)
    workingDir: $(params.source-dir)
    env:
    - name: REGISTRY_USER
      valueFrom:
        secretKeyRef:
          key: REGISTRY_USER
          name: registry-access
          optional: true
    - name: REGISTRY_PASSWORD
      valueFrom:
        secretKeyRef:
          key: REGISTRY_PASSWORD
          name: registry-access
          optional: true
    envFrom:
    - secretRef:
        name: ibm-entitled-registry-credentials
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    securityContext:
      privileged: true
    script: |
      APP_IMAGE="$(params.image-server)/$(params.image-namespace)/$(params.image-repository):$(params.image-tag)"
      buildah login -u ${IBM_ENTITLED_REGISTRY_USER} -p ${IBM_ENTITLED_REGISTRY_PASSWORD} cp.icr.io
      buildah --layers --storage-driver=$(params.STORAGE_DRIVER) bud --format=$(params.FORMAT) --tls-verify=$(params.TLSVERIFY) -f $(params.DOCKERFILE) -t ${APP_IMAGE} $(params.CONTEXT)
      set +x
      if [[ -n "${REGISTRY_USER}" ]] && [[ -n "${REGISTRY_PASSWORD}" ]] && [[ "$(params.image-server)" != "image-registry.openshift-image-registry.svc:5000"  ]]; then
        buildah login -u "${REGISTRY_USER}" -p "${REGISTRY_PASSWORD}" "$(params.image-server)"
        echo "buildah login -u "${REGISTRY_USER}" -p "xxxxx" "$(params.image-server)""
      fi
      set -x
      buildah --storage-driver=$(params.STORAGE_DRIVER) push --tls-verify=$(params.TLSVERIFY) --digestfile ./image-digest ${APP_IMAGE} docker://${APP_IMAGE}
