apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: igc-helm-package
spec:
  inputs:
    resources:
      - name: source
        type: git
      - name: image
        type: image
    params:
      - name: js-image
        type: string
        default: node:12-stretch
      - name: tools-image
        type: string
        default: garagecatalyst/ibmcloud-dev:1.0.10
  steps:
    - name: setup
      image: $(inputs.params.js-image)
      workingdir: $(inputs.resources.source.path)
      command: ["/bin/bash"]
      env:
        - name: BRANCH
          value: "$(inputs.resources.source.revision)"
      args:
        - -c
        - |
          set -x
          set +e

          git fetch origin ${BRANCH} --tags
          git checkout ${BRANCH}

          echo "IMAGE_VERSION=$(git describe --abbrev=0 --tags)" > ./env-config
          echo "IMAGE_NAME=$(basename -s .git `git config --get remote.origin.url` | tr '[:upper:]' '[:lower:]' | sed 's/_/-/g')" >> ./env-config

          cat ./env-config
    - name: deploy
      image: $(inputs.params.tools-image)
      workingdir: $(inputs.resources.source.path)
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      envFrom:
        - configMapRef:
            name: ibmcloud-config
      command: ["/bin/bash"]
      args:
        - -c
        - |
          set -e

          . ./env-config

          ENVIRONMENT_NAME="${NAMESPACE}"

          IMAGE_URL=$(inputs.resources.image.url)

          REGISTRY_URL=$(echo $IMAGE_URL | awk -F / '{print $1}')
          REGISTRY_NAMESPACE=$(echo $IMAGE_URL | awk -F / '{print $2}')

          echo "$REGISTRY_URL: $REGISTRY_URL"
          echo "$REGISTRY_NAMESPACE: $REGISTRY_NAMESPACE"
          echo "IMAGE_NAME: $IMAGE_NAME"
          echo "$IMAGE_VERSION: $IMAGE_VERSION"

          export CHART_ROOT=$(find . -name chart)
          echo "CHART_ROOT: $CHART_ROOT"

          export CHART=$(find . -name Chart\*)
          echo "CHART: $CHART"

          export CHART_NAME=$(cat $CHART | awk '/name:/ {print $2}')
          echo "CHART_NAME: $CHART_NAME"

          # Update Chart name and version
          if [[ "${CHART_NAME}" != "${IMAGE_NAME}" ]]; then
            echo "Renaming chart from ${CHART_NAME} to ${IMAGE_NAME}"
            cp -R "${CHART_ROOT}/${CHART_NAME}" "${CHART_ROOT}/${IMAGE_NAME}"
            cat "${CHART_ROOT}/${CHART_NAME}/Chart.yaml" | \
                yq w - apiVersion "v1" | \
                yq w - name "${IMAGE_NAME}" | \
                yq w - version "${IMAGE_VERSION}" > "${CHART_ROOT}/${IMAGE_NAME}/Chart.yaml"
          else
            echo "Chart name and image name match: ${IMAGE_NAME}"
          fi

          CHART_PATH="${CHART_ROOT}/${IMAGE_NAME}"

          echo ""
          echo "Chart ${CHART_PATH}"
          cat ${CHART_PATH}/Chart.yaml

          RELEASE_NAME="${IMAGE_NAME}"
          echo "RELEASE_NAME: $RELEASE_NAME"

          echo "INITIALIZING helm with client-only (no Tiller)"
          helm init --client-only 1> /dev/null 2> /dev/null
          echo $(helm version --client)

          IMAGE_REPOSITORY="${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}"

          INGRESS_ENABLED=true
          ROUTE_ENABLED=false
          if [[ "${CLUSTER_TYPE}" == "openshift" ]]; then
            INGRESS_ENABLED=false
            ROUTE_ENABLED=true
          fi

          # Update helm chart with repository and tag values
          cat ${CHART_PATH}/values.yaml | \
              yq w - nameOverride "${IMAGE_NAME}" | \
              yq w - fullnameOverride "${IMAGE_NAME}" | \
              yq w - image.repository "${IMAGE_REPOSITORY}" | \
              yq w - image.tag "${IMAGE_VERSION}" | \
              yq w - ingress.enabled "${INGRESS_ENABLED}" | \
              yq w - route.enabled "${ROUTE_ENABLED}" > ./values.yaml.tmp
          cp ./values.yaml.tmp ${CHART_PATH}/values.yaml
          cat ${CHART_PATH}/values.yaml

          echo "CHECKING CHART (lint)"
          helm lint ${CHART_PATH}

    - name: helm-chart
      image: $(inputs.params.tools-image)
      workingdir: $(inputs.resources.source.path)
      envFrom:
        - configMapRef:
            name: artifactory-config
            optional: true
        - secretRef:
            name: artifactory-access
            optional: true
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      command: ["/bin/bash"]
      args:
        - -c
        - |
          set -e

          . ./env-config

          if [[ -z "${ARTIFACTORY_ENCRYPT}" ]]; then
            echo "ARTIFACTORY_ENCRYPT is required from secret artifactory-access"
            exit 0
          fi

          if [[ -z "${ARTIFACTORY_USER}" ]]; then
            echo "ARTIFACTORY_USER is required from secret artifactory-access"
            exit 0
          fi

          if [[ -z "${ARTIFACTORY_PASSWORD}" ]]; then
            echo "ARTIFACTORY_PASSWORD is required from secret artifactory-access"
            exit 0
          fi

          if [[ -z "${ARTIFACTORY_URL}" ]]; then
            echo "ARTIFACTORY_URL is required from config map artifactory-config"
            exit 0
          fi

          IMAGE_URL=$(inputs.resources.image.url)

          export CHART_ROOT=$(find . -name chart)
          echo "CHART_ROOT: $CHART_ROOT"

          export CHART_NAME="${IMAGE_NAME}"
          echo "CHART_NAME: $CHART_NAME"

          CHART_PATH="${CHART_ROOT}/${CHART_NAME}"

          echo "Check if a Generic Local Repo has been created and retrieve the URL for it"
          export URL=$(curl -s -u${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD} -X GET "${ARTIFACTORY_URL}/artifactory/api/repositories?type=LOCAL" | jq -r '.[0].url')
          echo "Helm repo url: ${URL}"

          # Check if the URL is valid and we can continue
          if [ -n "${URL}" ]; then
              echo "Successfully read Repo ${URL}"
          else
              echo "No Repository Created"
              exit 1;
          fi;

          IMAGE_URL=$(inputs.resources.image.url)

          REGISTRY_URL=$(echo $IMAGE_URL | awk -F / '{print $1}')

          REGISTRY_NAMESPACE="${NAMESPACE}"
          # Package Helm Chart
          helm package --version ${IMAGE_VERSION} ${CHART_PATH}

          # Get the index and re index it with current Helm Chart
          curl -u${ARTIFACTORY_USER}:${ARTIFACTORY_ENCRYPT} -O "${URL}/${REGISTRY_NAMESPACE}/index.yaml"

          apiVersion=$(grep apiVersion ./index.yaml | sed -E "s/apiVersion: (.*)/\1/g")
          if [[ $(cat index.yaml | jq '.errors[0].status') != "404" ]] && [[ -n "${apiVersion}" ]]; then
              # Merge the chart index with the current index.yaml held in Artifactory
              echo "Merging Chart into index.yaml for Chart Repository"
              helm repo index . --url ${URL}/${REGISTRY_NAMESPACE} --merge index.yaml
          else
              # Dont Merge this is first time one is being created
              echo "Creating a new index.yaml for Chart Repository"
              rm index.yaml
              helm repo index . --url ${URL}/${REGISTRY_NAMESPACE}
          fi;

          # Persist the Helm Chart in Artifactory for us by ArgoCD
          curl -u${ARTIFACTORY_USER}:${ARTIFACTORY_ENCRYPT} -i -vvv -T ${CHART_NAME}-${IMAGE_VERSION}.tgz "${URL}/${REGISTRY_NAMESPACE}/${CHART_NAME}-${IMAGE_VERSION}.tgz"

          # Persist the Helm Chart in Artifactory for us by ArgoCD
          curl -u${ARTIFACTORY_USER}:${ARTIFACTORY_ENCRYPT} -i -vvv -T index.yaml "${URL}/${REGISTRY_NAMESPACE}/index.yaml"
