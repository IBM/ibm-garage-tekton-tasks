apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ibm-helm-release
  annotations:
    description: Publishes the helm chart to the helm repository using the version provided in the image-url
    app.openshift.io/description: Publishes the helm chart to the helm repository using the version provided in the image-url
    app.openshift.io/vcs-uri: https://github.com/IBM/ibm-garage-tekton-tasks
    app.openshift.io/vcs-ref: master
  labels:
    version: 0.0.0
spec:
  params:
    - name: git-url
    - name: git-revision
      default: master
    - name: source-dir
      default: /source
    - name: image-url
      default: ""
    - name: app-name
      default: ""
    - name: deploy-ingress-type
      default: "route"
    - name: tools-image
      default: garagecatalyst/ibmcloud-dev:1.1.3
  results:
    - name: helm-url
      description: The url of the helm repository
  volumes:
    - name: source
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - name: source
        mountPath: $(params.source-dir)
  steps:
    - name: git-clone
      image: alpine/git
      env:
        - name: GIT_PASSWORD
          valueFrom:
            secretKeyRef: 
              name: git-credentials
              key: password
              optional: true
        - name: GIT_USERNAME
          valueFrom:
            secretKeyRef: 
              name: git-credentials
              key: username
              optional: true
      script: |
        set +x
        if [[ -n "${GIT_USERNAME}" ]] && [[ -n "${GIT_PASSWORD}" ]]; then
            git clone "https://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.git-url) | awk -F 'https://' '{print $2}')" $(params.source-dir)
        else
            set -x
            git clone $(params.git-url) $(params.source-dir)
        fi
        set -x
        cd $(params.source-dir)
        git checkout $(params.git-revision)
    - name: package-helm
      image: $(params.tools-image)
      workingdir: $(params.source-dir)
      env:
        - name: TLS_SECRET_NAME
          valueFrom:
            configMapKeyRef:
              name: ibmcloud-config
              key: TLS_SECRET_NAME
              optional: true
        - name: INGRESS_SUBDOMAIN
          valueFrom:
            configMapKeyRef:
              name: ibmcloud-config
              key: INGRESS_SUBDOMAIN
              optional: true
        - name: ARTIFACTORY_URL
          valueFrom:
            configMapKeyRef:
              name: artifactory-config
              key: ARTIFACTORY_URL
              optional: true
        - name: ARTIFACTORY_ENCRYPT
          valueFrom:
            secretKeyRef: 
              name: artifactory-access
              key: ARTIFACTORY_ENCRYPT
              optional: true
        - name: ARTIFACTORY_PASSWORD
          valueFrom:
            secretKeyRef: 
              name: artifactory-access
              key: ARTIFACTORY_PASSWORD
              optional: true
        - name: ARTIFACTORY_USER
          valueFrom:
            secretKeyRef: 
              name: artifactory-access
              key: ARTIFACTORY_USER
              optional: true
      script: |
          #!/usr/bin/env bash
          set -ex

          echo "1. Package Helm Chart"

          GIT_URL="$(params.git-url)"
          GIT_REVISION="$(params.git-revision)"

          IMAGE_SERVER="$(echo "$(params.image-url)" | awk -F / '{print $1}')"
          IMAGE_NAMESPACE="$(echo "$(params.image-url)" | awk -F / '{print $2}')"
          IMAGE_REPOSITORY="$(echo "$(params.image-url)" | awk -F / '{print $3}' | awk -F : '{print $1}')"
          IMAGE_VERSION="$(echo "$(params.image-url)" | awk -F / '{print $3}' | awk -F : '{print $2}')"
          IMAGE_URL="${IMAGE_SERVER}/${IMAGE_NAMESPACE}/${IMAGE_REPOSITORY}"
          
          APP_NAME="$(params.app-name)"
          if [[ -z "${APP_NAME}" ]]; then
            APP_NAME="${IMAGE_REPOSITORY}"
          fi

          INGRESS_TYPE="$(params.deploy-ingress-type)"
          if [[ "${INGRESS_TYPE}" == "route" ]]; then
            ROUTE_ENABLED="true"
            INGRESS_ENABLED="false"
          else
            ROUTE_ENABLED="false"
            INGRESS_ENABLED="true"
          fi

          export CHART_ROOT=$(find . -name chart)
          echo "CHART_ROOT: $CHART_ROOT"

          export CHART=$(find . -name Chart*.yaml)
          echo "CHART: $CHART"

          export CHART_NAME=$(cat $CHART | awk '/name:/ {print $2}')
          echo "CHART_NAME: $CHART_NAME"

          # Update Chart name and version
          if [[ "${CHART_NAME}" != "${APP_NAME}" ]]; then
            echo "Renaming chart from ${CHART_NAME} to ${APP_NAME}"
            cp -R "${CHART_ROOT}/${CHART_NAME}" "${CHART_ROOT}/${APP_NAME}"
            cat "${CHART_ROOT}/${CHART_NAME}/Chart.yaml" | \
                yq w - apiVersion "v1" | \
                yq w - name "${APP_NAME}" | \
                yq w - version "${IMAGE_VERSION}" > "${CHART_ROOT}/${APP_NAME}/Chart.yaml"
          else
            echo "Chart name and image name match: ${APP_NAME}"
          fi

          CHART_PATH="${CHART_ROOT}/${APP_NAME}"

          echo ""
          echo "Chart ${CHART_PATH}"
          cat ${CHART_PATH}/Chart.yaml

          RELEASE_NAME="${APP_NAME}"
          echo "RELEASE_NAME: $RELEASE_NAME"

          echo "INITIALIZING helm with client-only (no Tiller)"
          helm init --client-only 1> /dev/null 2> /dev/null
          echo $(helm version --client)

          # Update helm chart with repository and tag values
          cat ${CHART_PATH}/values.yaml | \
              yq w - nameOverride "${APP_NAME}" | \
              yq w - fullnameOverride "${APP_NAME}" | \
              yq w - vcsInfo.repoUrl "${GIT_URL}" | \
              yq w - vcsInfo.branch "${GIT_REVISION}" | \
              yq w - image.repository "${IMAGE_URL}" | \
              yq w - image.tag "${IMAGE_VERSION}" | \
              yq w - ingress.enabled "${INGRESS_ENABLED}" | \
              yq w - route.enabled "${ROUTE_ENABLED}" > ./values.yaml.tmp
          cp ./values.yaml.tmp ${CHART_PATH}/values.yaml
          cat ${CHART_PATH}/values.yaml

          echo "CHECKING CHART (lint)"
          helm lint ${CHART_PATH}


          echo "2. Publish Helm Chart"

          if [[ -z "${HELM_URL}" ]] && [[ -z "${HELM_USER}" ]]; then
            if [[ -z "${ARTIFACTORY_URL}" ]]; then
              echo "It looks like Artifactory has not been installed (ARTIFACTORY_URL from artifactory-config config map is missing). Skipping step."
              exit 0
            fi

            set +x
            if [[ -z "${ARTIFACTORY_USER}" ]] || [[ -z "${ARTIFACTORY_PASSWORD}" ]]; then
              echo "Something's wrong... The Artifactory url is configured but the Artifactory credentials cannot be found. Check your artifactory-access secret."
              exit 1
            fi

            if [[ -z "${ARTIFACTORY_ENCRYPT}" ]]; then
                echo "It looks like your Artifactory installation is not complete. Please complete the steps found here - http://ibm.biz/complete-setup"
                exit 1
            fi

            echo "Check if a Generic Local Repo has been created and retrieve the URL for it on ${ARTIFACTORY_URL}/artifactory/api/repositories?type=LOCAL"
            export URL=$(curl -s -u${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD} -X GET "${ARTIFACTORY_URL}/artifactory/api/repositories?type=LOCAL" | jq -r '.[0].url')
            echo "Helm repo url: ${URL}"

            # Check if the URL is valid and we can continue
            set -x
            if [ -n "${URL}" ]; then
                echo "Successfully read Repo ${URL}"
                HELM_URL=${URL}
                HELM_USER="${ARTIFACTORY_USER}"
                set +x
                HELM_PASSWORD="${ARTIFACTORY_ENCRYPT}"
                set -x
            else
                echo "No Repository Created"
                exit 1;
            fi
          fi

          export CHART_ROOT=$(find . -name chart)
          echo "CHART_ROOT: $CHART_ROOT"

          export CHART_NAME="${APP_NAME}"
          echo "CHART_NAME: $CHART_NAME"

          CHART_PATH="${CHART_ROOT}/${CHART_NAME}"

          # Package Helm Chart
          helm package --version ${IMAGE_VERSION} ${CHART_PATH}

          # Get the index and re index it with current Helm Chart
          set +x
          echo "curl -u${HELM_USER}:xxxx -O ${HELM_URL}/${IMAGE_NAMESPACE}/index.yaml"
          curl -u${HELM_USER}:${HELM_PASSWORD} -O "${HELM_URL}/${IMAGE_NAMESPACE}/index.yaml"
          set -x

          apiVersion=$(grep apiVersion ./index.yaml | sed -E "s/apiVersion: (.*)/\1/g")
          if [[ $(cat index.yaml | jq '.errors[0].status') != "404" ]] && [[ -n "${apiVersion}" ]]; then
              # Merge the chart index with the current index.yaml held in Artifactory
              echo "Merging Chart into index.yaml for Chart Repository"
              helm repo index . --url ${HELM_URL}/${IMAGE_NAMESPACE} --merge index.yaml
          else
              # Dont Merge this is first time one is being created
              echo "Creating a new index.yaml for Chart Repository"
              rm index.yaml
              helm repo index . --url ${HELM_URL}/${IMAGE_NAMESPACE}
          fi;

          # Persist the Helm Chart in Helm repo for us by ArgoCD
          set +x
          echo "curl -u${HELM_USER}:xxxx -s -T ${CHART_NAME}-${IMAGE_VERSION}.tgz ${HELM_URL}/${IMAGE_NAMESPACE}/${CHART_NAME}-${IMAGE_VERSION}.tgz"
          curl -u${HELM_USER}:${HELM_PASSWORD} -s -T ${CHART_NAME}-${IMAGE_VERSION}.tgz "${HELM_URL}/${IMAGE_NAMESPACE}/${CHART_NAME}-${IMAGE_VERSION}.tgz"

          # Persist the Helm Index in the helm repo for us by ArgoCD
          echo "curl -u${HELM_USER}:xxxx -s -T index.yaml ${HELM_URL}/${IMAGE_NAMESPACE}/index.yaml"
          curl -u${HELM_USER}:${HELM_PASSWORD} -s -T index.yaml "${HELM_URL}/${IMAGE_NAMESPACE}/index.yaml"

          echo -n "${HELM_URL}/${IMAGE_NAMESPACE}" | tee $(results.helm-url.path)

          
