apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ibm-img-release
  annotations:
    description: Tags the git repository and releases the intermediate container image with the version tag
    app.openshift.io/description: Tags the git repository and releases the intermediate container image with the version tag
    app.openshift.io/vcs-uri: https://github.com/IBM/ibm-garage-tekton-tasks
    app.openshift.io/vcs-ref: master
  labels:
    version: 0.0.0
spec:
  params:
    - name: image-from
      default: ""
    - name: image-to
      default: ""
    - name: SKOPEO_IMAGE
      default: quay.io/containers/skopeo:v1.1.0
    - name: IMAGE_FROM_TLS_VERIFY
      default: "true"
    - name: IMAGE_TO_TLS_VERIFY
      default: "true"
  results:
    - name: image-url
      description: The url of the image to be pushed
  volumes:
    - name: varlibcontainers
      emptyDir: {}
  steps:
    - name: image-tag
      image: $(params.SKOPEO_IMAGE)
      env:
        - name: REGISTRY_USER
          valueFrom:
            secretKeyRef:
              name: registry-access
              key: REGISTRY_USER
              optional: true
        - name: REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: registry-access
              key: REGISTRY_PASSWORD
              optional: true
        - name: VAULT_INSTANCE_ID
          valueFrom:
            secretKeyRef:
              name: portieris-keys
              key: vault-instance-id
              optional: true
        - name: VAULT_KEY_ID
          valueFrom:
            secretKeyRef:
              name: portieris-keys
              key: vault-key-id
              optional: true
        - name: VAULT_URL
          valueFrom:
            secretKeyRef:
              name: portieris-keys
              key: vault-url
              optional: true
        - name: SIGNATURE_FINGERPRINT
          valueFrom:
            secretKeyRef:
              name: portieris-keys
              key: portieris-signature-fingerprint
              optional: true
        - name: IBM_CLOUD_APIKEY
          valueFrom:
            secretKeyRef:
              key: APIKEY
              name: ibmcloud-apikey
              optional: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      securityContext:
        privileged: true
      script: |
        IMAGE_FROM="$(params.image-from)"
        REGISTRY_SERVER_FROM=$(echo "${IMAGE_FROM}" | awk -F / '{print $1}')
        IMAGE_TO="$(params.image-to)"
        REGISTRY_SERVER_TO=$(echo "${IMAGE_TO}" | awk -F / '{print $1}')
        IMAGE_FROM_TLS_VERIFY=$(params.IMAGE_FROM_TLS_VERIFY)
        IMAGE_TO_TLS_VERIFY=$(params.IMAGE_TO_TLS_VERIFY)

        echo "Tagging ${IMAGE_FROM} as ${IMAGE_TO}"
        set +x
        if [[ -n "${REGISTRY_USER}" ]] && [[ -n "${REGISTRY_PASSWORD}" ]] && [[ ! "${REGISTRY_SERVER_FROM}" =~ ":" ]]; then
          IMAGE_FROM_CREDS="--src-creds ${REGISTRY_USER}:${REGISTRY_PASSWORD}"
        fi
        if [[ -n "${REGISTRY_USER}" ]] && [[ -n "${REGISTRY_PASSWORD}" ]] && [[ ! "${REGISTRY_SERVER_TO}" =~ ":" ]]; then
          IMAGE_TO_CREDS="--dest-creds ${REGISTRY_USER}:${REGISTRY_PASSWORD}"
        fi
        
        if [[ "${REGISTRY_SERVER_FROM}" =~ ":" ]]; then
          IMAGE_FROM_TLS_VERIFY="false"
        fi
        if [[ "${REGISTRY_SERVER_TO}" =~ ":" ]]; then
          IMAGE_TO_TLS_VERIFY="false"
        fi


        SIGNING_PARAMETERS=""
        if [[ -n "$SIGNATURE_FINGERPRINT" ]] ; then
        
          echo "Image signing parameters found.  Attempting to sign the image."
          SIGNING_PARAMETERS="--insecure-policy --sign-by $SIGNATURE_FINGERPRINT"

          yum install jq -y
        
          echo "Getting IAM Token"
          curl -s -o token.txt \
            -X POST "https://iam.cloud.ibm.com/identity/token" \
            --header "Content-Type: application/x-www-form-urlencoded" \
            --header "Accept: application/json"  \
            --data-urlencode "grant_type=urn:ibm:params:oauth:grant-type:apikey" \
            --data-urlencode "apikey=${IBM_CLOUD_APIKEY}"

          IAM_TOKEN=$(jq ".access_token" -r token.txt)

          echo "Getting private key from keystore for image signing"
          curl -s -o payload \
            "${VAULT_URL}/api/v2/keys/${VAULT_KEY_ID}" \
            -H "Authorization: Bearer ${IAM_TOKEN}"   \
            -H "Content-Type: application/json" \
            -H "bluemix-instance: ${VAULT_INSTANCE_ID}"

          ENCODEDKEY=$(jq ".resources[0].payload" -r payload)
          echo $ENCODEDKEY > encodedkey
          base64 -d encodedkey > decodedkey

          echo "Importing key"
          gpg --import decodedkey

          #remove the default signature policy, which will keep the signature local instead of uploading it to the registry
          rm -f /etc/containers/registries.d/default.yaml
        fi

        echo "skopeo $SIGNING_PARAMETERS copy --src-tls-verify=${IMAGE_FROM_TLS_VERIFY} --dest-tls-verify=${IMAGE_TO_TLS_VERIFY} docker://${IMAGE_FROM} docker://${IMAGE_TO}"
        COMMAND="skopeo $SIGNING_PARAMETERS copy ${IMAGE_FROM_CREDS} --src-tls-verify=${IMAGE_FROM_TLS_VERIFY} ${IMAGE_TO_CREDS} --dest-tls-verify=${IMAGE_TO_TLS_VERIFY} docker://${IMAGE_FROM} docker://${IMAGE_TO}"
        ${COMMAND}

        echo -n "${IMAGE_TO}" | tee $(results.image-url.path)


        if [[ -n "$SIGNATURE_FINGERPRINT" ]] ; then 

          # cleanup image signing artifacts
          rm -f token.txt
          rm -f payload
          rm -f encodedkey
          rm -f decodedkey
          rm -rf /tekton/home/.gnupg
        fi