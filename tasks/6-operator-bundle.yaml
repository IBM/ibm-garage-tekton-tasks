apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ibm-operator-bundle
  annotations:
    description: Executes logic to build, tag and push a container image using the intermediate sha tag to the image-url
    app.openshift.io/description: Executes logic to build, tag and push a container image using the intermediate sha tag to the image-url
    app.openshift.io/vcs-uri: https://github.com/IBM/ibm-garage-tekton-tasks
    app.openshift.io/vcs-ref: master
  labels:
    version: 0.0.0
spec:
  params:
    - name: git-url
    - name: git-revision
      default: master
    - name: source-dir
      default: /source
    - name: image-url
      default: ""
    - name: image-suffix
      default: "-bundle"
    - name: image-tag
      default: ""
    - name: default-channel
      default: "alpha"
    - name: BUNDLE_IMAGE
      default: quay.io/cloudnativetoolkit/operator-sdk:v0.10.4
    - name: BUILDER_IMAGE
      default: registry.redhat.io/rhel8/buildah@sha256:23fb7971ea6ac4aaaaa1139473a602df0df19222a3b5a76b551b2b9ddd92e927
    - name: DOCKERFILE
      default: ./bundle.Dockerfile
    - name: CONTEXT
      default: .
    - name: TLSVERIFY
      default: "false"
    - name: FORMAT
      default: "docker"
    - name: STORAGE_DRIVER
      description: Set buildah storage driver
      default: vfs
  results:
    - name: bundle-image-url
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: source
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - name: source
        mountPath: $(params.source-dir)
  steps:
    - name: setup-docker-auth
      image: $(params.BUILDER_IMAGE)
      env:
        - name: REGISTRY_USER
          valueFrom:
            secretKeyRef:
              name: registry-access
              key: REGISTRY_USER
              optional: true
        - name: REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: registry-access
              key: REGISTRY_PASSWORD
              optional: true
        - name: AUTH_CONFIG
          valueFrom:
            secretKeyRef:
              name: registry-auth
              key: .dockerconfigjson
              optional: true
        - name: AUTH_CONFIG_OVERRIDE
          valueFrom:
            secretKeyRef:
              name: registry-auth-local
              key: .dockerconfigjson
              optional: true
        - name: IBM_ENTITLED_REGISTRY_USER
          valueFrom:
            secretKeyRef:
              name: ibm-entitled-registry-credentials
              key: IBM_ENTITLED_REGISTRY_USER
              optional: true
        - name: IBM_ENTITLED_REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ibm-entitled-registry-credentials
              key: IBM_ENTITLED_REGISTRY_PASSWORD
              optional: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      script: |
        if [[ -n "${AUTH_CONFIG_OVERRIDE}" ]]; then
          AUTH_CONFIG="${AUTH_CONFIG_OVERRIDE}"
        elif [[ -z "${AUTH_CONFIG}" ]]; then
          AUTH_CONFIG="{}"
        fi
        
        AUTH_FILE="/var/lib/containers/auth.json"
        
        echo "${AUTH_CONFIG}" > "${AUTH_FILE}"
        
        if [[ -n "${IBM_ENTITLED_REGISTRY_USER}" ]] && [[ -n "${IBM_ENTITLED_REGISTRY_PASSWORD}" ]]; then
          buildah login --authfile "${AUTH_FILE}" -u ${IBM_ENTITLED_REGISTRY_USER} -p ${IBM_ENTITLED_REGISTRY_PASSWORD} cp.icr.io
          echo "buildah login --authfile \"${AUTH_FILE}\" -u \"${IBM_ENTITLED_REGISTRY_USER}\" -p \"xxxxx\" cp.icr.io"
        fi
        
        IMAGE_URL="$(params.image-url)"
        REGISTRY_SERVER=$(echo "${IMAGE_URL}" | awk -F / '{print $1}')
        
        if [[ -n "${REGISTRY_USER}" ]] && [[ -n "${REGISTRY_PASSWORD}" ]] && [[ "${REGISTRY_SERVER}" != "image-registry.openshift-image-registry.svc:5000"  ]]; then
          buildah login --authfile "${AUTH_FILE}" -u "${REGISTRY_USER}" -p "${REGISTRY_PASSWORD}" "${REGISTRY_SERVER}"
          echo "buildah login --authfile \"${AUTH_FILE}\" -u \"${REGISTRY_USER}\" -p \"xxxxx\" \"${REGISTRY_SERVER}\""
        fi
        
        echo "Auth file: ${AUTH_FILE}"
    - name: git-clone
      image: quay.io/cloudnativetoolkit/alpine/git
      env:
        - name: GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: password
              optional: true
        - name: GIT_USERNAME
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: username
              optional: true
      script: |
        set +x
        if [[ -n "${GIT_USERNAME}" ]] && [[ -n "${GIT_PASSWORD}" ]]; then
            git clone "$(echo $(params.git-url) | awk -F '://' '{print $1}')://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.git-url) | awk -F '://' '{print $2}')" $(params.source-dir)
        else
            set -x
            git clone $(params.git-url) $(params.source-dir)
        fi
        set -x
        cd $(params.source-dir)
        git checkout $(params.git-revision)
    - name: build
      image: $(params.BUNDLE_IMAGE)
      workingDir: $(params.source-dir)
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      script: |
        AUTH_FILE="/var/lib/containers/auth.json"
        echo "Auth file: ${AUTH_FILE}"
        
        export VERSION="$(params.image-tag)"
        export IMG="$(params.image-url):$(params.image-tag)"
        export BUNDLE_IMG_BASE="$(params.image-url)$(params.image-suffix)"
        export BUNDLE_IMG="${BUNDLE_IMG_BASE}:$(params.image-tag)"

        IMAGE_SERVER=$(echo "${BUNDLE_IMG}" | awk -F / '{print $1}')

        make bundle

        # TODO missing default channel
        echo "LABEL operators.operatorframework.io.bundle.channel.default.v1=$(params.default-channel)" >> $(params.DOCKERFILE)
        cat $(params.DOCKERFILE)
        echo "  operators.operatorframework.io.bundle.channel.default.v1: $(params.default-channel)" >> bundle/metadata/annotations.yaml
        cat bundle/metadata/annotations.yaml

        podman --authfile=${AUTH_FILE} --storage-driver=$(params.STORAGE_DRIVER) build --format=$(params.FORMAT) --tls-verify=$(params.TLSVERIFY) -f $(params.DOCKERFILE) -t ${BUNDLE_IMG} $(params.CONTEXT)
        podman --authfile=${AUTH_FILE} --storage-driver=$(params.STORAGE_DRIVER) push --tls-verify=$(params.TLSVERIFY) --digestfile ./image-digest ${BUNDLE_IMG} docker://${BUNDLE_IMG}

        echo -n "${BUNDLE_IMG_BASE}" > $(results.bundle-image-url.path)
